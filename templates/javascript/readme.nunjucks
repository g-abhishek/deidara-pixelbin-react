# Pixelbin JS SDK
Pixelbin JS SDK helps you integrate Pixelbin with your Frontend JS Application. 

## Installation

``` 
npm install  @pixelbin/js --save
```

## Usage

### Setup

``` javascript

// Import the Pixelbin class
import Pixelbin from "@pixelbin/js";

// Create your instance
const pixelbin = new Pixelbin({
    cloud: {
        cloudName: "demo",
        zone: "default", // optional
    }
});
```
### Transform and Optimize Images
``` javascript
// Create a new instance. If you have't (see above for the details)
const pixelbin = new Pixelbin({/*...*/});

// create a new image
const demoImage = pixelbin.image("demo.jpeg");

// Import a transformations from plugins
import EraseBg from "@pixelbin/js/plugins/EraseBg";

// Create EraseBg.bg transformation
let t1 = EraseBg.bg();

// Import the resize transformation
import {resize} from "@pixelbin/js/plugins/Sharp";

// Create resize transformation
const t2 = resize({height: 100, width: 100});

// Add the transformations to the image
demoImage.setTransformations(t1.and(t2));

// Get the image url
console.log(demoImage.getUrl());
```


### Usage in browser
Add the `umd` distributable in a script tag along with axios
``` html
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script src="pixelbin.js" ></script>
```

``` javascript
// Pixelbin is available in the browser as `Pixelbin` on the window object
const pixelbin = new Pixelbin({cloud: {cloudName: "demo", zone:"default"}});

// create an image with the pixelbin object
const image = pixelbin.image("demoImage.jpeg");

// create a transformation
let t = Pixelbin.plugins.Sharp.resize({height: 100, width: 100});

// add Transformations to the image 
image.setTransfromation(t);

// get the url
image.getUrl();
```

### Upload images to pixelbin

The SDK provides a `upload` utility to upload images directly from the broswer with a presigned url. 

#### upload(file, presignedUrl, fields): 

| Parameter | type |
| --------- | ---- |
| file | File |
| url  | string |
| fields | Object | 

**returns**: Promise

`url` and `fields` can be generated with the Pixelbin Backend SDK. 

### Using the URL Utils

Pixelbin gives access to URL Utils on the Pixelbin class. It provides the following features.

``` javascript
const urlUtils = Pixelbin.urlUtils;

// get a list of transformations from image url
const transformationList = urlUtils.deconstructPixelbinUrl(pixelbinUrl);

const originalImageUrl = "INSERT-ORIGINAL-URL";

// add transformations to another image.
const url = urlUtils.generatePixelbinUrl(originalImageUrl, transformationList);

```





## List of supported transformations
{% if data %}
{% for plugin in data %}
### {{loop.index}}{% raw %}.{% endraw %} {{plugin.plugin.name}}
{% for method in plugin.methods %}

<details>
<summary> {{loop.index}}{% raw %}.{% endraw %} {{method.name}} </summary>
{% if method.parameters | length %}
#### Supported Configuration

| Property | Type | Defaults |
| -- | -- | -- | {% for parameter in method.parameters %}
| {{ parameter.name | camelCase() }} | {%if parameter.type === "enum" %} {{parameter.type}} {% raw %}:{% endraw %}{% for item in parameter.enum %} `{{item}}` {% if not loop.last%},{% endif %} {% endfor %} {% raw %}{% endraw %}{% else %} {{parameter.type}} {% endif %} | {%if parameter.default | isString(parameter.default)%}'{{parameter.default}}'{% else %}{{parameter.default}}{% endif %}|{% endfor %}
{% endif %}
#### Usage Example
``` javascript
const t = {{ method.name }}({% raw %}{{% endraw %}{% for parameter in method.parameters %}
    {{ parameter.name | camelCase() }}: {%if parameter.default | isString(parameter.default)%}'{{parameter.default}}'{% else %}{{parameter.default}}{% endif %} {% if not loop.last %},{% endif %}{% endfor %}
{% raw %}}{% endraw %});
```

</details>
{% endfor %}
{% endfor %}
{% endif %}
