# Pixelbin JS SDK

Pixelbin JS SDK helps you integrate Pixelbin with your Frontend JS Application.

## Installation

```
npm install  @pixelbin/js --save
```

## Usage

### Setup

```javascript
// Import the Pixelbin class
import Pixelbin from "@pixelbin/js";

// Create your instance
const pixelbin = new Pixelbin({
    cloudName: "demo",
    zone: "default", // optional
});
```

---

### Transform and Optimize Images

```javascript
// Import transformations from plugins
import EraseBg from "@pixelbin/js/plugins/EraseBg";
import Basic from "@pixelbin/js/plugins/Basic";

// Create a new instance. If you have't (see above for the details)
const pixelbin = new Pixelbin({
    /*...*/
});

// Create EraseBg.bg transformation
let t1 = EraseBg.bg();

// Create resize transformation
const t2 = Basic.resize({ height: 100, width: 100 });

// create a new image
const demoImage = pixelbin.image("path/to/image"); // File Path on Pixelbin

// Add the transformations to the image
demoImage.setTransformation(t1.and(t2));

// Get the image url
console.log(demoImage.getUrl());
// output
// https://cdn.pixelbin.io/v2/your-cloud-name/z-slug/erase.bg()~t.resize(h:100,w:100)/path/to/image
```

---

### Add Pixelbin to HTML

Add the [this](./dist) distributable in a script tag along with axios

```html
<script src="pixelbin.js"></script>
```

```javascript
// Pixelbin is available in the browser as `Pixelbin` on the window object
const pixelbin = new Pixelbin({ cloudName: "demo", zone: "default" });

// create an image with the pixelbin object
const image = pixelbin.image("demoImage.jpeg");

// create a transformation
let t = Pixelbin.plugins.Basic.resize({ height: 100, width: 100 });

// add Transformations to the image
image.setTransformation(t);

// get the url
image.getUrl();
// output
// https://cdn.pixelbin.io/v2/demo/default/t.resize(h:100,w:100)/demoImage.jpeg

```

---

## Upload images to pixelbin

The SDK provides a `upload` utility to upload images directly from the browser with a presigned url.

### upload(file, signedDetails):

| parameter | type                                                          |
| --------- | ------------------------------------------------------------- |
| file ([File](https://developer.mozilla.org/en-US/docs/Web/API/File)) | File to upload to Pixelbin |
| signedDetails (Object) | `signedDetails` can be generated with the Pixelbin Backend SDK @pixelbin/core. |

**returns**: Promise


Example : 
1. Define an html file input element
```html
<input type="file" id="fileInput" />
```

2. Generate the presignedUrl with the backend sdk. [click here](#add-link).

3. Use the response object as is with the upload api as shown below.

```javascript
const fileInput = document.getElementById("fileInput");
// the signed url and fields can be generated and served with @pixelbin/core

const handleFileInputEvent = function (e) {
    const file = e.target.files[0];
    Pixelbin.upload(file, signedDetails)
        .then(() => console.log("Uploaded Successfully"))
        .catch((err) => console.log("Error while uploading"));
};
fileInput.addEventListener("change", handleFileInputEvent);
```

---

## Utilities

Pixelbin provides url utilities to construct and deconstruct Pixelbin urls.

### urlToObj

Deconstruct a pixelbin url

| parameter   | type   |
| ----------- | ------ |
| pixelbinUrl | String |

    
**Returns**:

| property        | description            | example                           |
| --------------- | --------------- | --------------------------------- |
| cloudName (string)       | The cloudname extracted from the url          | `your-cloud-name`                 |
| zone (string)          | 6 character zone slug          | `z-slug` |
| version (string)    | cdn api version          | `v2` |
| transformations (array) | Extracted transformations from the url |   |
| pattern (string)  | Transformation pattern extracted from the url          | `t.resize(h:100, w:200)~t.flip()` |
| original (string) | Url of the original image | `https://cdn.pixelbin.io/v2/your-cloud-name/z-slug/original/path/to/image.jpeg`|

Example: 
```javascript
const pixelbinUrl =
    "https://cdn.pixelbin.io/v2/your-cloud-name/z-slug/t.resize(h:100,w:200)~t.flip()/path/to/image.jpeg";

const obj = Pixelbin.utils.urlToObj(pixelbinUrl);
// obj
// {
//     "cloudName": "your-cloud-name",
//     "zone": "z-slug",
//     "version": "v2",
//     "transformations": [
//         {
//             "plugin": "t",
//             "name": "resize",
//             "isPreset": false,
//             "values": [
//                 {
//                     "key": "h",
//                     "value": "100"
//                 },
//                 {
//                     "key": "w",
//                     "value": "200"
//                 }
//             ]
//         },
//         {
//             "plugin": "t",
//             "name": "flip",
//             "isPreset": false
//         }
//     ],
//     "original": "https://cdn.pixelbin.io/v2/your-cloud-name/z-slug/original/path/to/image.jpeg"
// }
```

### objToUrl

Converts the extracted url obj to a Pixelbin url. 

| property        | description            | example                           |
| --------------- | --------------- | --------------------------------- |
| cloudName (string)       | The cloudname extracted from the url          | `your-cloud-name`                 |
| zone (string)          | 6 character zone slug          | `z-slug` |
| version (string)    | cdn api version          | `v2` |
| transformations (array) | Extracted transformations from the url |   |
| pattern (string)  | Transformation pattern extracted from the url          | `t.resize(h:100, w:200)~t.flip()` |
| original (string) | Url of the original image | `https://cdn.pixelbin.io/v2/your-cloud-name/z-slug/original/path/to/image.jpeg`|

```javascript
const obj = {
    "cloudName": "your-cloud-name",
    "zone": "z-slug",
    "version": "v2",
    "transformations": [
        {
            "plugin": "t",
            "name": "resize",
            "isPreset": false,
            "values": [
                {
                    "key": "h",
                    "value": "100"
                },
                {
                    "key": "w",
                    "value": "200"
                }
            ]
        },
        {
            "plugin": "t",
            "name": "flip",
            "isPreset": false
        }
    ],
    "original": "https://cdn.pixelbin.io/v2/your-cloud-name/z-slug/original/path/to/image.jpeg"
}
const url = Pixelbin.utils.objToUrl(obj); // obj is as shown above
// url
// https://cdn.pixelbin.io/v2/your-cloud-name/z-slug/t.resize(h:100,w:200)~t.flip()/path/to/image.jpeg
```

## Transformation
A transformation is an operation or a list of operations that can be performed on an image. Please refer [list of supported transformations](#list-of-supported-transformations) for details. 

``` javascript
// import a resize transformation
import { resize } from "@pixelbin/js/plugins/Basic";

// create the resize transformation
const t = resize({height: 100, width: 100});
```

Multiple transformations can be chained by using `and` on the created transformation object

``` javascript
// import a resize transformation
import { resize, flip } from "@pixelbin/js/plugins/Basic";

// create the basic transformations
const t1 = resize({height: 100, width: 100});
const t2 = flip();
const t3 = t1.and(t2);
```

## Image
Image class represents an image on Pixelbin. 

``` javascript
//To create an Image, call image method on the pixelbin object;
const image = pixelbin.image("path/to/image");
```

Transformations can be set on an image by using `setTransformation` on the image object. 

``` javascript
image.setTransformation(t)
```

To get the url of the image with the applied transformations, use the `getUrl` on the image object.
``` javascript
image.getUrl()
```
For a working example, refer [here](#transform-and-optimize-images)
## List of supported transformations
{% if data %}
{% for plugin in data %}
### {{loop.index}}{% raw %}.{% endraw %} {{plugin.plugin.name}}
{% for method in plugin.methods %}

<details>
<summary> {{loop.index}}{% raw %}.{% endraw %} {{method.name}} </summary>
{% if method.parameters | length %}
#### Supported Configuration

| parameter | type | defaults |
| -- | -- | -- | {% for parameter in method.parameters %}
| {{ parameter.name | camelCase() }} | {%if parameter.type === "enum" %} {{parameter.type}} {% raw %}:{% endraw %}{% for item in parameter.enum %} `{{item}}` {% if not loop.last%},{% endif %} {% endfor %} {% raw %}{% endraw %}{% else %} {{parameter.type}} {% endif %} | {%if parameter.default | isString(parameter.default)%}`{{parameter.default}}`{% else %}{{parameter.default}}{% endif %}|{% endfor %}
{% endif %}
#### Usage Example
``` javascript
const t = {{ method.name }}({% raw %}{{% endraw %}{% for parameter in method.parameters %}
    {{ parameter.name | camelCase() }}: {%if parameter.default | isString(parameter.default)%}'{{parameter.default}}'{% else %}{{parameter.default}}{% endif %} {% if not loop.last %},{% endif %}{% endfor %}
{% raw %}}{% endraw %});
```

</details>
{% endfor %}
{% endfor %}
{% endif %}
