import "core-js/stable";
import "regenerator-runtime/runtime";
import Image from './image.js';
import Transformation from "./transformation";
import * as errors from "./errors/PixelbinErrors";
import { getUrlUtilsInstance } from "./utils/url.utils";
import { upload } from "./utils/upload.utils";
{% if data %}{% for plugin in data.plugins %}
import * as {{plugin.plugin.name}} from "./plugins/{{plugin.plugin.name}}";
{% endfor %}

/**
* class to create a Pixelbin object
*/
class Pixelbin {
    /**
    * @param {Object} cloud-details takes detail for cloud name and zone
    */
    constructor( {cloud : { cloudName, zone }}) {
        this.cloudName = cloudName;
        this.zone = zone === "default"? "" : zone || "";
    }

    /**
    * provides image on which transformation can be done.
    * @param {String} imageUri path of image.
    * returns Image
    */
    image(imageUri) {
        return new Image(imageUri, this.cloudName, this.zone);
    }

    /**
    * provides a url utils instance with the pixelbin object context
    * returns UrlUtils
    */
    getUrlUtils() {
        return getUrlUtilsInstance(this);
    }

    /**
    * provides functionality to upload files.
    * @param {File} file
    * @param {string} signedUrl
    * @param {Object} fields
    */
    static async upload(file, signedUrl, fields) {
        return upload(file, signedUrl, fields);
    }

    static plugins = {
    {% for plugin in data.plugins %}{{plugin.plugin.name}},{% endfor %}
    }

    static Transformation = Transformation


}

export {
    Pixelbin as default, 
    Transformation
};
{% endif %}
