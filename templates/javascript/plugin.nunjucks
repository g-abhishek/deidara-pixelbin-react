{% if data %}

import Transformation from '../transformation.js';
    
{% for method in data.methods %}
/**
* {{ method.description }}
{% if method.parameters | length %}{% for parameter in method.parameters -%}* @param {% raw %}{{% endraw %}{{ parameter.type }}} {{parameter.name | camelCase()}} - {{parameter.title}}
{%- endfor %}{% endif %}
* returns Transformation
*/
export const {{method.name}} = function(config = {
    {% for parameter in method.parameters %}{{parameter.name | camelCase() }} : {%if parameter.default | isString(parameter.default)%}'{{parameter.default}}'{% else %}{{parameter.default}}{% endif %}{% if not loop.last %},{% endif %}{% endfor %}
}) {
    const paramIdMap = {
{% for parameter in method.parameters %} {{parameter.name | camelCase() }}: "{{parameter.identifier}}" {% if not loop.last %},{% endif %}
{% endfor %}
    };
    const params = [{% for parameter in method.parameters %} "{{parameter.name | camelCase() }}"{% if not loop.last %},{% endif %}{% endfor %}]
        .filter((param) => config.hasOwnProperty(param));
    const transformation = ["{{method.plugin}}.{{method.name}}", "("];
    params.map((param, idx) => {
        transformation.push(`${paramIdMap[param]}:${config[param]}`);
        if(idx !== (params.length - 1))
            transformation.push(",");
    })
    transformation.push(")")
    return new Transformation([
        transformation.join("")
    ]);
}
{% endfor %}

export default {
{% for method in data.methods %} {{method.name}}{% if not loop.last %},{% endif %}
{% endfor %}
}
{% endif %}